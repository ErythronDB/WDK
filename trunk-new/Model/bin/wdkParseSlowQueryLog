#!/usr/bin/perl

use strict;
use Getopt::Long qw(GetOptions);

my ($logfile, $sort, $thresholdSecs, $only, $ignore);

GetOptions("f=s" => \$logfile,
           "s!" => \$sort,
           "t=f" => \$thresholdSecs,
           "o=s" => \$only,
           "i=s" => \$ignore
          );

usage() unless $logfile;

open(F, $logfile) || die "Can't open log file '$logfile'\n";

my $warn;
my $warns = [];
while(<F>) {
    if (/^\d+ \[/ && $warn) {
	push(@$warns, $warn);
	$warn = undef;
    }
    if (/\[WARN \].*SLOW SQL: (\S+)/) {
	$warn->{sec} = $1;
	$warn->{warnLine} = $_;
    }
    elsif ($warn) {
	$warn->{sql} .= $_;
    }
}
push(@$warns, $warn) if $warn;
processWarns($warns);

sub processWarns{
    my ($warns) = @_;
    my @sortedWarns = $sort? 
	(sort {$b->{sec} <=> $a->{sec}} @$warns)
	: @$warns;

    foreach my $warn (@sortedWarns) {
	next if ($ignore && $warn->{sql} =~ /$ignore/);
	next if ($thresholdSecs && $warn->{sec} < $thresholdSecs);
	next if ($only && $warn->{sql} !~ /$only/);

	print STDOUT $warn->{warnLine};
	print STDOUT $warn->{sql};
	print STDOUT "\n\n";
	print STDOUT "======================================================================================\n";
    }
}

sub usage {
    print STDERR "
usage:  wdkParseSlowQueryLog --f logfile [--sort] [--t thresholdsecs] [--o only_regex] [--i ignore_regex]

where:
  logfile:       file with [WARN] messages indicating slow wdk queries
  sort:          sort by slowest speed (default retains order in log)
  thresholdsecs: only report queries slower than this
  only_regex:    only report queries with sql matching this regex
  ignore_regex:  do not report queries with sql matching this regex

";

    exit(1);
}






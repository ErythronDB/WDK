To Do

test of windows emacs

-move jdbc driver class name into config file so that it is not hard-coded into command line tools


NEW
 - wdkQuery: 
    - if -querySet or -query omitted, list the available query sets and queries
    - if -queryLists, show all queryLists
    - offer a -sqlDebug mode which shows all sql

 - how do we define complex parameter value constraints in the XML?   There 
   are these types of constraints:
     - simple (eg regex, min, max) which are easy in XML
     - logic (require a programming language, eg, length must be even number
     - cross-param constraints (eg, width < length)

 - model should have all queries check their derived columns (to make sure that they are interpolating valid column names)


SORTED AND PRIORITIZED

General

 - logging

 - importing model xml files into each other


UserQueries

 - also... handle CVs in different forms (list, tree, graph)

 - handle re-usable params from a separate file (importing params)

 - flat file queries

 - process queries

 - query history

Records

 - implement specialDataTypes

 - column names must be lower case.  throw exception if not

RecordLists:

 - handle RecordList ID Queries that are uncacheable (currently only support cacheable queries for getting
   the IDs; if they are uncacheable there is the potential that they would not be returned in the order we
   expect

 - Optomize outer query for RecordList; instead of iterating through the ResultList for the ID QueryInstance for 
   a new RecordListInstance and throwing away IDs that fall outside of the start row and end row, we want to do 
   the following: run the ID Query, put it in the cache, and then call a method on the ResultFactory that says 
   "get all IDs from this QueryResult table that fall within this range (start row and end row)."  Method will
   be named getIdsInRange(int startRow, int endRow) or something similar.  This is an optomization so is lower
   on the priority list.

DONE

 - improve the output of wdkXml (use indenting)

 - configuration with .prop file

 - param references 

 - abstract SqlEnumParam into ControlledVocabParam

 - use connection pool

 - complete implementation of SqlEnumParam (uses DB connection)

 - implement simple questionViewer

 - cache results

 - records: figure out basic architecture:  generic v. generated beans

 - virtual query sets (sets of queries already defined elsewhere)

 - abstract ResultSet into TableResult

 - associate additional info with query result columns, such as URLs, help

 - define page queries as a set of modular queries (a la report maker).  and, instead of returning result set, return abstract result with accessor methods that trigger the queries.

 - For table results, use declared columns to provide default heading names

 - error handling during parse of model xml file

 - DTD/XmlSchema for WdkXml?

 - better handle when an atrribute query returns no result

 - use full query names all over

 - document: have to clear out cache if query sql select clause changes

 - document: when sql is joined with cache tables, need alias to avoid ambigous column names

 -why does Record need a Reference? (what reference is it?)

 -use queryRef instead of twoPartName in <record>

- clean up the bean and map properties 
   - remove deprecated methods
   - move all bean properties to a special section in the file

- change the name of any class that is exposed as a Bean to end in Bean. 

- fix the ordering of params, queries, etc.

-consolidate the config files:
   - model config could point to model file and prop file
   - have model config use a default location
   - upshot: lose lots of args on the command line, etc

-why is Record.java catching WdkModelException?

-why is SummaryInstance.java catching WdkModelException?

 - derived column: must check that referenced columns exist

 - factor the various Tester classes.

 - factor the various Set classes?

 - update tutorial (include wdkCache)

 - document that the queries may be in a "create table as" context

 - wdkQuery: 

 - use webinstall for WDKTestSite

 - Javadocs (generated by build system)
 
 - boolean queries


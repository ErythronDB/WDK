
Strategy for Batch Submission 

The main challenges are:
   - gathering the info about the data set from the user
        - whether it is a set or a singleton
        - what the name of the set is
        - if the set is in a comma delimited string or a file
   - dumping the dataset into a table
   - stuffing the table name into the query
   - remembering that the result set is a "mapping table", ie, has a mapped_id column
   - displaying the name of the dataset as part of the query name in the history
   - passing information from java to perl so that the report maker can discover the 
     datasets to offer as columns

The most important of the challenge is communicating from java to perl.  we propose to do this
via the Queries table in the database.  Java will pass the session id in the url to the report
maker.  Thus the url will look like this (where 77 is the session id):

https://www.cbil.upenn.edu/cgi-bin/dotsgenes-dev/reportMaker.pl?cacheTable=guswww.cache80893&descr=DoTS+Transcripts+mapped+to+the+GeneCards+gene+%27BRCA1%27&s_id=77

The Queries table will have a row added (by DataListParam -- see below) that will point to 
the cache table that holds the user's dataset.  It will also gain two columns: session_id
and dataset_name.  These will both be filled in if the row contains a pointer to a dataset table, 
or if the table points to a result table, and the result table belongs to a query with a dataset:

QUERY_ID   QUERY NAME                                              PARAM0   RESULT_TABLE  SESSION_ID  DATASET_NAME
1          "user_dataset"                                                   cache1        null        null
2          "RNAs w/ LL matching 1+ members of 'my_locus_links'"    cache1   cache2        77          "my_locus_links"
3          "RNAs w/ LL matching 3434"                              cache3   cache4        null        null

The example above shows the contained_accs query in two different cases:
  - the user has supplied a dataset (1 and 2)
  - the user has supplied a singleton (3)

This design makes a basic assumption: that a given query can have only one DataSetParam.  This is 
clear from the fact that a row in the Queries table has a dataset_name attribute.  This seems
to be a reasonable limitation for the current implementation under the current wdk.
   
Implementation Details

 - augment Queries table with session_id and dataset_name columns

 - cbil.gus.servlet.db.oracle.WebDb
    - add new recordQueryStartTime() method with additional arguments: sessionId, datasetName
    - old version of that method calls new one with new args set to null
    - inserts row into Queries table
 
 - cbil.gus.servlet.db.params.DataListParam
    - new class
    - subclass of something?
    - can display itself in HTML (ugh)
    - receives this info from form:
         - single or set
         - if set: 
            - set's name
            - comma delimited list or file (error if both)
    - validation method:
         - confirms that there is no existing entry in Queries with the same session_id and dataset_name
         - datasetTable = WebDb.recordQueryStartTime("user_dataset", session_id, dataset_name)
         - populates table with dataset
         - sets the param's value to be the name of the table, eg, cache1
         - sets the param's HTML value to be:
              - the singleton value, eg, "3434"
              - a set membership, eg, "1+ members of 'my_locus_links'
         - introduces "hidden" param in the values hash:
              - DataSetName: value is the user's name for the dataset

 - servlet config file
    - mapping queries must:
         - include a parameter which is a DataSetParam
         - modify their sql so that they return two columns: na_sequence_id, mapped_id
         - include in the from clause the value of the DataSetParam (which will be a table name)
         - include a join against the mapped_id column of that table

 - cbil.gus.servlet.pages.QueryPage
    - it calls sqlQuery.setDatasetName(paramHash.key('DataSetName'))

 - cbil.gus.servlet.db.SqlQuery
    - gains set/getDatasetName() methods.  

 - cbil.gus.servlet.db.QueryCacheI and cbil.gus.servlet.db.oracle.WebDb
    - gains method recordQueryStartTime(String queryName, String params[], String sessionId, String datasetName)
      which sets the session_id and dataset_name columns

 - cbil.gus.servlet.pages.SQLIdResultTable 
    - inserts row into Queries table for the result table:
        - calls sqlQuery.getDatasetName() method.
        - if null, calls old version queryCache.recordQueryStartTime()
        - else calls new version (using HttpSession to get session id)

 - cbil.gus.servlet.pages.QueryHistoryPage
    - adds session id to the list of params it instantiates into the downloadURL
    - servlet config file adds a <--session_id--> into its DefaultDownloadURL

 - gusreport
    - replaces the mappedToColumnName argument with a mappingTables argument, which
      takes a comma delimited list of datasetname:tablename 
    - adds machinery to do joins against those tables

 - reportMaker.pl
    - grabs session id from url
    - queries Queries table for rows with:
        - that session id
        - non-null dataset_name
    - for any it finds, it:
        - offers the dataset name as a column
        - these checkboxes actually go to a separate variable, where the values are datasetname:tablename
        - these are sent to gusreport in the mappingTables argument


TODO
  - fix regex test of dataset name
  - use (or not) guswww.xxxxxx
  - incorporate into real queries

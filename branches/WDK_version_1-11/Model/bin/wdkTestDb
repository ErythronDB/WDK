#!@perl@

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use Carp;
use WDK::Model::CommandHelper;

my ($dropDb, $createDb, $modelName);

&GetOptions ('model=s' => \$modelName,
	     'drop!' => \$dropDb,
	     'create!' => \$createDb);

&usage unless $modelName && ($dropDb || $createDb);

my $GUS_HOME = $ENV{GUS_HOME};
my $CLASSPATH = &WDK::Model::CommandHelper::getJavaClasspath($GUS_HOME);
my $sysProps = &WDK::Model::CommandHelper::getSystemProps($GUS_HOME, 'wdkTestDb');

my $args = "-model $modelName ";

if ($dropDb){
    $args .= "-drop ";
}
if ($createDb){
    $args .= "-create ";
}

my $dataDirectory = "$GUS_HOME/data/WDKToySite/Model/testTables/";

opendir(DATADIR, "$dataDirectory") ||
    &confess("opendir failed when trying to open $dataDirectory");
my $nextTableName;
my @tables;
while ($nextTableName = readdir(DATADIR)){
    if ($nextTableName =~ /^[A-Za-z]+$/){
	push (@tables, $nextTableName);
    }
}

my $tableArg = "";

foreach my $tableName (@tables){
    $tableArg .= $dataDirectory . "/" . $tableName . " ";
}

$args .= "-tables $tableArg";

my $cmd = "java $sysProps -classpath $CLASSPATH org.gusdb.wdk.model.test.TestDBManager $args";

#print STDERR "wdkTestDb: running command $cmd\n";

system($cmd);

############

sub usage {
    print "
Create a toy database to use in testing the WDK.  (The database is created from files included in the WDK distribution.) 

usage: wdkTestDb -model model_name [-create | -drop]

Options:
-model <model>         The name of the model.  This is used to find the Model config file (\$GUS_HOME/config/model_name-config.xml)
";
    exit(1);
}
